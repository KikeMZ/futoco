import random
DIMENSIONS = ["R","I","A","S","E","C"]

def preguntar(pregs):
    print("\n--- TEST (20 preguntas) ---")
    print("Responde cada √≠tem del 1 al 5 (1 = nada, 5 = mucho).", flush=True)
    ans = {}
    for q in pregs:
        pv = q["prob_vector"]
        vec_txt = f"[R:{pv['R']:.2f} I:{pv['I']:.2f} A:{pv['A']:.2f} S:{pv['S']:.2f} E:{pv['E']:.2f} C:{pv['C']:.2f}]"
        print(f"\nVector previo a la P{q['id']}: {vec_txt}")
        print(f"{q['id']:02d}. {q['texto']}  (dimensi√≥n objetivo: {q['dimension']})")
        while True:
            try:
                val = int(input("   Respuesta [1-5]: ").strip())
                if 1 <= val <= 5:
                    ans[q["id"]] = val
                    break
            except ValueError:
                pass
            print("  ‚Üí Ingresa un n√∫mero del 1 al 5.")
        print(f"   Nota secuencia: {q.get('nota_secuencia','')}")
    return ans

def perfil_riasec(pregs, respuestas):
    agg = {k: [] for k in DIMENSIONS}
    for q in pregs:
        if q["id"] in respuestas:
            agg[q["dimension"]].append(respuestas[q["id"]])
    prom = {k: (sum(v)/len(v) if v else 0.0) for k,v in agg.items()}
    return {k: (max(0.0, min((v-1)/4, 1.0))) for k,v in prom.items()}

def avatar_por_perfil(p):
    top2 = sorted(p.items(), key=lambda kv: kv[1], reverse=True)[:2]
    key = "".join([d for d,_ in top2])
    mapping = {
        "RI": ("üîßüß† Exploradora Anal√≠tica", "Afinidad por ingenier√≠a, l√≥gica y ciencias aplicadas."),
        "IR": ("üß†üîß Analista Constructora", "Ciencia con orientaci√≥n pr√°ctica y tangible."),
        "IA": ("üß†üé® Cient√≠fica Creativa", "Curiosidad cient√≠fica con impulso art√≠stico."),
        "SI": ("ü§ùüß† Mentora Investigativa", "Empat√≠a social con an√°lisis riguroso."),
        "SE": ("ü§ùüöÄ Lideresa Social", "Vocaci√≥n de impacto con liderazgo."),
        "AE": ("üé®üöÄ Creativa Emprendedora", "Innovaci√≥n con impulso para lanzar proyectos."),
        "AS": ("üé®ü§ù Dise√±adora Humana", "Creatividad enfocada en personas y experiencias."),
        "EC": ("üöÄüìä Estratega Ejecutiva", "Liderazgo con orden y procesos."),
        "CE": ("üìäüöÄ Gestora Din√°mica", "Ejecuci√≥n con visi√≥n de negocio."),
        "RC": ("üîßüìä T√©cnica Met√≥dica", "Orientaci√≥n pr√°ctica con alto orden."),
        "CR": ("üìäüîß Gestora T√©cnica", "Procesos con base t√©cnica."),
        "AR": ("üé®üîß Arquitecta Artesana", "Creatividad con construcci√≥n concreta.")
    }
    return mapping.get(key, ("üåü Exploradora en Desarrollo", "Perfil balanceado en varias √°reas."))

def medallas_por_perfil(p):
    medals = []
    if p["E"] >= 0.75: medals.append("ü•á Liderazgo")
    if p["I"] >= 0.75: medals.append("üß© Resoluci√≥n de Problemas")
    if p["A"] >= 0.70: medals.append("üé® Mente Creativa")
    if p["S"] >= 0.70: medals.append("üí¨ Comunicaci√≥n Emp√°tica")
    if p["C"] >= 0.70: medals.append("üìö Orden y Disciplina")
    if p["R"] >= 0.70: medals.append("üõ†Ô∏è Manos a la Obra")
    if not medals: medals.append("‚≠ê Constancia")
    return medals

def jugar_escenarios(juego):
    print("\n================= MINI-JUEGO VOCACIONAL (IA) =================")
    print(juego["juego"]["introduccion"])
    score = {"satisfaccion": 5, "estres": 3, "crecimiento": 3}
    for i, esc in enumerate(juego["juego"]["escenarios"], 1):
        print(f"\n{i}. Carrera: {esc['carrera']}")
        print(f"   Situaci√≥n: {esc['situacion']}")
        for idx, op in enumerate(esc["opciones"], 1):
            print(f"     {idx}) {op['accion']}")
        sel = input("   Elige [1/2]: ").strip()
        idx = 0 if sel == "1" else 1
        op = esc["opciones"][idx] if idx in (0,1) else esc["opciones"][0]
        outcome_key = random.choices(
            ["resultado_bueno","resultado_neutro","resultado_malo"], weights=[0.45, 0.35, 0.20]
        )[0]
        print(f"   ‚Üí {op[outcome_key]}")
        if outcome_key == "resultado_bueno":
            score["satisfaccion"] = min(10, score["satisfaccion"] + 2)
            score["crecimiento"]  = min(10, score["crecimiento"]  + 2)
        elif outcome_key == "resultado_neutro":
            score["crecimiento"]  = min(10, score["crecimiento"]  + 1)
        else:
            score["estres"]       = min(10, score["estres"] + 2)
        print(f"   Estado ‚Üí Satisfacci√≥n {score['satisfaccion']} | Estr√©s {score['estres']} | Crecimiento {score['crecimiento']}")
    balance = score["satisfaccion"] + score["crecimiento"] - score["estres"]
    mood = "üëç Positivo" if balance >= 6 else ("‚öñÔ∏è Mixto" if balance >= 2 else "üëÄ Retador")
    print(f"\nüèÅ Resultado del juego: {mood} (balance={balance})\n")
